#!/bin/bash

clickhouse_ready() {
python << END
import sys

from pydantic import BaseSettings, Field

import clickhouse_connect
from clickhouse_connect.driver.client import Client
from clickhouse_connect.driver.exceptions import ClickHouseError

class Settings(BaseSettings):
    kafka_host: str = Field('localhost1', env='KAFKA_HOST')
    kafka_port: str = Field('9092', env='KAFKA_PORT')
    group_id: str = Field('group_watching_movies', env='KAFKA_GROUP_ID')
    topic: str = Field('watching_movies', env='KAFKA_TOPIC')
    batch_timeout: int = Field(10, env='BATCH_TIMEOUT') # in sec
    batch_size: int = Field(10, env='BATCH_SIZE')
    ch_host: str = Field('localhost', env='CLICKHOUSE_HOST')
    ch_port: int = Field(18123, env='CLICKHOUSE_PORT')
    ch_db: str = Field('db1', env='CLICKHOUSE_DATABASE')
    ch_table: str = Field('watching_movies', env='CLICKHOUSE_TABLE')
    ch_username: str = Field('user1', env='CLICKHOUSE_USERNAME')
    ch_password: str = Field('pass1', env='CLICKHOUSE_PASSWORD')

    @property
    def kafka_server(self):
        return f"{self.kafka_host}:{self.kafka_port}"


settings = Settings()

def ping_clickhouse():
    clickhouse_client = None
    try:
        clickhouse_client =  clickhouse_connect.get_client(
                host=settings.ch_host,
                port=settings.ch_port,
                database=settings.ch_db,
                username=settings.ch_username,
                password=settings.ch_password
            )
        if not clickhouse_client.ping():
            sys.exit(-2)
    except ClickHouseError:
        sys.exit(-2)
    finally:
        if clickhouse_client is not None:
            clickhouse_client.close()

ping_clickhouse()

sys.exit(0)

END
}

mongo_ready() {
python << END
import sys

from pydantic import BaseSettings, Field

from pymongo import MongoClient
from pymongo.errors import ConnectionError

class Settings(BaseSettings):
    mongo_host: str = Field("localhost", env="MONGO_HOST")
    mongo_port: str = Field("27017", env="MONGO_PORT")
    mongo_user: str | None = Field(env="MONGO_USER")
    mongo_password: str | None = Field(env="MONGO_PASSWORD")
    mongo_db: str = Field("test", env="MONGO_DB")
    mongo_rs: str | None = Field(env="MONGO_REPLICASET")
    mongo_authdb: str = Field("test", env="MONGO_AUTHDB")
    mongo_certpath: str | None = Field(env="MONGO_CERTPATH")

    @property
    def mongo_uri(self):
        uri = 'mongodb://'
        if self.mongo_user and self.mongo_password:
            uri += f'{quote(self.mongo_user)}:{quote(self.mongo_password)}@'
        uri += '{hosts}:{port}/?authSource={auth_src}'.format(
            hosts=self.mongo_host, port=self.mongo_port, auth_src=self.mongo_authdb
        )
        if self.mongo_rs:
            uri += f'&replicaSet={self.mongo_rs}'
        return uri

settings = Settings()

def ping_mongo():
    try:
        client = MongoClient(settings.mongo_uri, tlsCAFile=settings.mongo_certpath)[settings.mongo_db]
        client.server_info()
    except ConnectionError:
        sys.exit(-1)
    finally:
        if client:
            client.close()

ping_mongo()

sys.exit(0)
END
}

until clickhouse_ready; do
  >&2 echo 'Waiting for Clickhouse to become available...'
  sleep 5
done
>&2 echo 'Clickhouse is available'

until mongo_ready; do
  >&2 echo 'Waiting for Mongo to become available...'
  sleep 5
done
>&2 echo 'Mongo is available'

exec "$@"
